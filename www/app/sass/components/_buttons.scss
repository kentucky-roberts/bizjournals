/*------------------------------------*
    $BUTTONS
\*------------------------------------*/
.btn {
    &:focus {
        @include tab-focus();
    }
    &.no-focus,
    &.no-focus:active,
    &.no-focus:focus {
        outline: none;
    }

    &:hover,
    &:focus {
        text-decoration: none;
    }

    &:active,
    &.active {
        outline: 0;
        background-image: none;
        @include box-shadow(inset 0 3px 5px rgba(0,0,0,.125));
    }

    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        cursor: default;
        pointer-events: none; // Future-proof disabling of clicks
        @include opacity(.65);
        @include box-shadow(none);
    }
}





/*------------------------------------*
    BUTTONS
\*------------------------------------*/
.btn {
    display: inline-block;
    @include font-size($btn__font-size);
    line-height: 1.2;
    padding: .5em .8em .4em;
    margin-bottom: 0; // For input.btn

    vertical-align: middle;
    white-space: nowrap;

    font-family: $btn__font-family;
    font-weight: $btn__font-weight;
    text-align: center;

    cursor: pointer;

    border-width: 1px;
    border-style: solid;
    border-radius: $btn__border-radius;

    // Syntax note: the unquote("") escapes the contents of the string. Without this, the comma between shadows caused errors.
    //.box-shadow($btn__box-shadow);
    /*
    @include transition(unquote("background 2s ease-in-out"));
    @include transition(unquote("border 2s ease-in-out"));
    */

    & + .btn {
        @include margin-left(10px);
    }

    &:focus {
        @include tab-focus();
    }

    &:hover,
    &:focus {
        text-decoration: none;
    }

    &:active,
    &.active {
        outline: 0;
        background-image: none;
        @include box-shadow(inset 0 3px 5px rgba(0,0,0,.125));
    }

    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        cursor: default;
        pointer-events: none; // Future-proof disabling of clicks
        @include opacity(.65);
        @include box-shadow(none);
    }

}

.btn--block {
    display: block;
    width: 100%;
}

.btn--wide {
    padding-right: 3em;
    padding-left: 3em;
}


/*------------------------------------*
    $SIZES
\*------------------------------------*/
// Large
.btn--large {
    @include font-size($btn--large__font-size);
}

// Small
.btn--small {
    @include font-size($btn--small__font-size);
}

// Mini
.btn--xsmall {
    @include font-size($btn--xsmall__font-size);
}





/*------------------------------------*
    $VARIANTS
\*------------------------------------*/
// Default

.btn {
  color: $btn__text-color;
  @include text-shadow-inset($btn__text-color);
  @include btn-pseudo-states($btn__text-color, $btn__background-color, $btn__border-color, $btn__is-flat, $btn__background-color--hover);
}

.btn {
    background-color: $white;

    // Faking the pseudo states, don't have time to make the mixin aware of transparency and whatnot
    // TODO: Get these back into a generator!

    &:hover,
    &:focus,
    &:active,
    &.active {
        color: $white;
    }

    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        &:hover,
        &:focus,
        &:active,
        &.active {
            border-color: transparent;
            background-color: transparent;
        }
    }

    .ruby & {
        color: $ruby;
        border-color: $ruby;

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $white;
            background: $ruby;
        }
    }
    .sapphire & {
        color: $sapphire;
        border-color: $sapphire;

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $white;
            background: $sapphire;
        }
    }
    .emerald & {
        color: $emerald;
        border-color: $emerald;

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $white;
            background: $emerald;
        }
    }
}
.btn--subtle {
    background-color: $white;

    // Faking the pseudo states, don't have time to make the mixin aware of transparency and whatnot
    // TODO: Get these back into a generator!

    &:hover,
    &:focus,
    &:active,
    &.active {
        color: $white;
    }

    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        &:hover,
        &:focus,
        &:active,
        &.active {
            border-color: transparent;
            background-color: transparent;
        }
    }

    .ruby & {
        color: $ruby;
        border-color: rgba($ruby, (25/100));

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $white;
            background: $ruby;
        }
    }
    .sapphire & {
        color: $sapphire;
        border-color: rgba($sapphire, (25/100));

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $white;
            background: $sapphire;
        }
    }
    .emerald & {
        color: $emerald;
        border-color: rgba($emerald, (25/100));

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $white;
            background: $emerald;
        }
    }
}
.sapphire .btn--primary {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, $sapphire, darken($sapphire, 5%), $btn__is-flat, darken($sapphire, 5%));
}
.ruby .btn--primary {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, $ruby, darken($ruby, 5%), $btn__is-flat, darken($ruby, 5%));
}
.emerald .btn--primary {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, $emerald, darken($emerald, 5%), $btn__is-flat, darken($emerald, 5%));
}
/*
.btn--secondary {
    color: $btn--secondary__text-color;
    @include text-shadow-inset($btn--secondary__text-color);
    @include btn-pseudo-states($btn--secondary__background-color, $btn--secondary__border-color, $btn__is-flat, darken($btn--secondary__background-color, 5%));
}
*/

.btn--link.btn--link {
    border-color: transparent;
    background-color: transparent;

    padding-right: 0;
    padding-left: 0;


    // Syntax note: the unquote("") escapes the contents of the string. Without this, the comma between shadows caused errors.
    @include box-shadow(none);

    // Faking the pseudo states, don't have time to make the mixin aware of transparency and whatnot

    .ruby &,
    .sapphire &,
    .emerald & {
        &:hover,
        &:focus,
        &:active,
        &.active {
            text-decoration: underline;

            border-color: transparent;
            background-color: transparent;
        }
    }


    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        &:hover,
        &:focus,
        &:active,
        &.active {
            border-color: transparent;
            background-color: transparent;
        }
    }

    .ruby & {
        color: $ruby;

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $ruby;
        }
    }
    .sapphire & {
        color: $sapphire;

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $sapphire;
        }
    }
    .emerald & {
        color: $emerald;

        &:hover,
        &:focus,
        &:active,
        &.active {
            color: $emerald;
        }
    }
}

.btn--inverted.btn--inverted {
    color: $white;
    border-color: rgba($white, (25/100));
    background-color: $black;
    background-color: transparent;

    // Faking the pseudo states, don't have time to make the mixin aware of transparency and whatnot
    // TODO: Get these back into a generator!

    &:hover,
    &:focus,
    &:active,
    &.active {
        color: $white;
        border-color: $white;
        background-color: transparent;
    }

    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        &:hover,
        &:focus,
        &:active,
        &.active {
            border-color: rgba($white, (10/100));
            background-color: transparent;
        }
    }
}
/*------------------------------------*
    $TRANSPARENT BUTTONS

    .btn--overlay:
    Typically use an embedded icon, like the search submit button in the header
    Don't inherit any styles from .btn
\*------------------------------------*/
.btn--overlay {
    position: absolute;
    top: 50%;
    right: 0;
    margin-top: -.75em; // Really don't think this will hold up over time?
    color: $gray;
    border: none;
    background: transparent;

    &:hover {
        .ruby & {
            color: $ruby;
        }
        .sapphire & {
            color: $sapphire;
        }
        .emerald & {
            color: $emerald;
        }
    }
}

.btn--outlined {
    background-color: #000;
    background-color: transparent;
}

.btn--inverted {
  color: #fff;
  border-color: rgba(255, 255, 255, 0.25);
  background-color: #000;
  background-color: transparent;
}

/*
    $SOCIAL BUTTONS

*/
.btn--social {
    padding-left: .6em;
    padding-right: .6em;

    [class*="icon"][class*="icon"] {
        color: $white;
    }
}
.btn--email.btn--email {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, rgba($email-color, (80/100)), transparent, $btn__is-flat, $email-color, transparent);
}
.btn--twitter.btn--twitter {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, rgba($twitter-brand-color, (80/100)), transparent, $btn__is-flat, $twitter-brand-color, transparent);
}
.btn--linkedin.btn--linkedin {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, rgba($linkedin-brand-color, (80/100)), transparent, $btn__is-flat, $linkedin-brand-color, transparent);
}
.btn--facebook.btn--facebook {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, rgba($facebook-brand-color, (80/100)), transparent, $btn__is-flat, $facebook-brand-color, transparent);
}
.btn--googleplus.btn--googleplus {
    color: $white;
    @include text-shadow-inset($white);
    @include btn-pseudo-states($white, rgba($googleplus-brand-color, (80/100)), transparent, $btn__is-flat, $googleplus-brand-color, transparent);
}