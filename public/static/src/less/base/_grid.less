/*------------------------------------*
    $RESPONSIVE GRID

	TODO:
		.clear-- ?
		.faux-column equivalent?
\*------------------------------------*/
.row {
    .clearfix();

	> * {
		float: left;
        position: relative;
        min-height: 1px;

		width: 100%; // I'm scared.
		
		.row--flush.row--flush& {
            padding: 0;
        }
	}
	
	&.row--flush.row--flush {
        margin: 0;
    }
}
.generate-responsive-rows(@size-name; @gutter-width; @gutter-width--condensed; @gutter-width--stretched) {
    .viewport--@{size-name} {
		.row {
	        margin-right: -(@gutter-width * .5);
	        margin-left: -(@gutter-width * .5);

	        > * {
	            padding-right: (@gutter-width * .5);
	            padding-left: (@gutter-width * .5);
	        }
	    }

	    // Continue to condense gutters inside primary/secondary for now,
	    // but allow for the .row--default-gutters modifier to negate this.
	    // TODO: Consider changing the default behavior.
	    .primary .row:not(.row--default-gutters),
	    .secondary .row:not(.row--default-gutters) {
	        margin-right: -(@gutter-width--condensed * .5);
	        margin-left: -(@gutter-width--condensed * .5);

	        > * {
	            padding-right: (@gutter-width--condensed * .5);
	            padding-left: (@gutter-width--condensed * .5);
	        }
	    }

        .row.row--stretched {
            margin-right: -(@gutter-width--stretched);
            margin-left: -(@gutter-width--stretched);

            > * {
                padding-right: (@gutter-width--stretched);
                padding-left: (@gutter-width--stretched);
            }
        }
	}

}
.generate-responsive-rows(xs, @gutter--phone-ish, @gutter--phone-ish--condensed, @gutter--phone-ish--stretched);
.generate-responsive-rows(sm, @gutter--phone-ish, @gutter--phone-ish--condensed, @gutter--phone-ish--stretched);
.generate-responsive-rows(md, @gutter--tablet-ish, @gutter--tablet-ish--condensed, @gutter--tablet-ish--stretched);
.generate-responsive-rows(lg, @gutter--desktop-ish, @gutter--desktop-ish--condensed, @gutter--desktop-ish--stretched);
.generate-responsive-rows(xl, @gutter--desktop-ish--large, @gutter--desktop-ish--large--condensed, @gutter--desktop-ish--large--stretched);

// Base columns
// Escape first number, slash.
// Looks like .8/12 or .md__8/12 in practice
.generate-column-selectors(@viewport; @base-columns-class; @viewport-columns-class) when (@viewport = false) {
	@column-selector: ~".@{base-columns-class}";
	@push-selector: ~".push-@{viewport-columns-class}";
	@pull-selector: ~".pull-@{viewport-columns-class}";
}
.generate-column-selectors(@viewport; @base-columns-class; @viewport-columns-class) when (default()) {
	@column-selector: ~".viewport--@{viewport} .@{viewport}__@{viewport-columns-class}, .viewport--@{viewport}-only .@{viewport}-only__@{viewport-columns-class}";
	@push-selector: ~".viewport--@{viewport} .@{viewport}__push-@{viewport-columns-class}, .viewport--@{viewport}-only .@{viewport}-only__push-@{viewport-columns-class}";
	@pull-selector: ~".viewport--@{viewport} .@{viewport}__pull-@{viewport-columns-class}, .viewport--@{viewport}-only .@{viewport}-only__pull-@{viewport-columns-class}";
}


.generate-column(@span; @total-columns; @viewport: false) {
	@base-columns-class-initial: ~"\3@{span} \/@{total-columns}";

	// Special case for our only span with two digits, which needs a formatting tweak
	@base-columns-class: replace(@base-columns-class-initial, "311 ", "31 1");

	@viewport-columns-class: ~"@{span}\/@{total-columns}";

	@column-width: percentage(@span/@total-columns);

	.generate-column-selectors(@viewport; @base-columns-class; @viewport-columns-class);

	@{column-selector} { width: percentage(@span / @total-columns); }
	@{push-selector} { margin-left: percentage(@span / @total-columns); }
	@{pull-selector} { margin-left: -(percentage(@span / @total-columns)); }

}
.generate-columns(@viewport: false) {
	.generate-column(1,1,@viewport);
	.generate-column(1,2,@viewport);
	.generate-column(1,3,@viewport);
	.generate-column(2,3,@viewport);
	.generate-column(1,4,@viewport);
	.generate-column(3,4,@viewport);
	.generate-column(1,5,@viewport);
	.generate-column(2,5,@viewport);
	.generate-column(3,5,@viewport);
	.generate-column(4,5,@viewport);
	.generate-column(1,6,@viewport);
	.generate-column(5,6,@viewport);
	.generate-column(1,8,@viewport);
	.generate-column(3,8,@viewport);
	.generate-column(5,8,@viewport);
	.generate-column(7,8,@viewport);
	.generate-column(1,10,@viewport);
	.generate-column(3,10,@viewport);
	.generate-column(7,10,@viewport);
	.generate-column(9,10,@viewport);
	.generate-column(1,12,@viewport);
	.generate-column(5,12,@viewport);
	.generate-column(7,12,@viewport);
	.generate-column(11,12,@viewport);
}

.generate-columns();
.generate-columns(xs);
.generate-columns(sm);
.generate-columns(md);
.generate-columns(lg);
.generate-columns(xl);





/*------------------------------------*
    $RIGID ROWS

	Add modifier to individual rows to clear after every nth column.
	This will make sure that columns of unequal height will still render
	in even rows.
	At every breakpoint, all columns must have equal spans.

\*------------------------------------*/
.generate-rigid-rows(@cols) {
    @nth: (@cols + 1);
    
    .row--has-@{cols}-cols,
	.viewport--xs-only .row--has-@{cols}-cols\@xs-only,
	.viewport--sm .row--has-@{cols}-cols\@sm,
	.viewport--sm-only .row--has-@{cols}-cols\@sm-only,
	.viewport--md .row--has-@{cols}-cols\@md,
	.viewport--md-only .row--has-@{cols}-cols\@md-only,
	.viewport--lg .row--has-@{cols}-cols\@lg,
	.viewport--lg-only .row--has-@{cols}-cols\@lg-only,
	.viewport--xl .row--has-@{cols}-cols\@xl,
	.viewport--xl-only .row--has-@{cols}-cols\@xl-only, {
		> * {
			clear: none;
		}

		> :nth-child(@{nth}n) {
			clear: left;
		}
	}
}

.generate-rigid-rows(2);
.generate-rigid-rows(3);
.generate-rigid-rows(4);
.generate-rigid-rows(5);
.generate-rigid-rows(6);

/*
// Alternative approach that generates much less CSS,
// but requires more logic in the viewscripts to add classes when necessary
.clear-left,
.viewport--xs-only .clear-left\@xs-only,
.viewport--sm .clear-left\@sm,
.viewport--sm-only .clear-left\@sm-only,
.viewport--md .clear-left\@md,
.viewport--md-only .clear-left\@md-only,
.viewport--lg .clear-left\@lg,
.viewport--lg-only .clear-left\@lg-only,
.viewport--xl .clear-left\@xl,
.viewport--xl-only .clear-left\@xl-only, {
	clear: left;
}
*/




.row--middle,
.viewport--xs-only .row--middle\@xs-only,
.viewport--sm .row--middle\@sm,
.viewport--sm-only .row--middle\@sm-only,
.viewport--md .row--middle\@md,
.viewport--md-only .row--middle\@md-only,
.viewport--lg .row--middle\@lg,
.viewport--lg-only .row--middle\@lg-only,
.viewport--xl .row--middle\@xl,
.viewport--xl-only .row--middle\@xl-only {
	display: table;
	> * {
		float: none;
		display: table-cell;
		vertical-align: middle;
	}
}